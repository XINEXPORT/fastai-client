{"version":3,"file":"lib.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport {\n  Conversation,\n  Mode,\n  SessionConfig,\n  Callbacks,\n  Options,\n  Status,\n  ClientToolsConfig,\n  InputConfig,\n} from \"@11labs/client\";\n\nexport type {\n  Role,\n  Mode,\n  Status,\n  SessionConfig,\n  DisconnectionDetails,\n  Language,\n} from \"@11labs/client\";\nexport { postOverallFeedback } from \"@11labs/client\";\n\nexport type HookOptions = Partial<\n  SessionConfig & HookCallbacks & ClientToolsConfig & InputConfig\n>;\nexport type ControlledState = {\n  micMuted?: boolean;\n  volume?: number;\n};\nexport type HookCallbacks = Pick<\n  Callbacks,\n  | \"onConnect\"\n  | \"onDisconnect\"\n  | \"onError\"\n  | \"onMessage\"\n  | \"onAudio\"\n  | \"onDebug\"\n  | \"onUnhandledClientToolCall\"\n>;\n\nexport function useConversation<T extends HookOptions & ControlledState>(\n  props: T = {} as T\n) {\n  const { micMuted, volume, ...defaultOptions } = props;\n  const conversationRef = useRef<Conversation | null>(null);\n  const lockRef = useRef<Promise<Conversation> | null>(null);\n  const [status, setStatus] = useState<Status>(\"disconnected\");\n  const [canSendFeedback, setCanSendFeedback] = useState(false);\n  const [mode, setMode] = useState<Mode>(\"listening\");\n\n  useEffect(() => {\n    if (micMuted !== undefined) {\n      conversationRef?.current?.setMicMuted(micMuted);\n    }\n  }, [micMuted]);\n\n  useEffect(() => {\n    if (volume !== undefined) {\n      conversationRef?.current?.setVolume({ volume });\n    }\n  }, [volume]);\n\n  useEffect(() => {\n    return () => {\n      conversationRef.current?.endSession();\n    };\n  }, []);\n\n  return {\n    startSession: (async (options?: HookOptions) => {\n      if (conversationRef.current?.isOpen()) {\n        return conversationRef.current.getId();\n      }\n\n      if (lockRef.current) {\n        const conversation = await lockRef.current;\n        return conversation.getId();\n      }\n\n      try {\n        lockRef.current = Conversation.startSession({\n          ...(defaultOptions ?? {}),\n          ...(options ?? {}),\n          onModeChange: ({ mode }) => {\n            setMode(mode);\n          },\n          onStatusChange: ({ status }) => {\n            setStatus(status);\n          },\n          onCanSendFeedbackChange: ({ canSendFeedback }) => {\n            setCanSendFeedback(canSendFeedback);\n          },\n        } as Options);\n\n        conversationRef.current = await lockRef.current;\n        // Persist controlled state between sessions\n        if (micMuted !== undefined) {\n          conversationRef.current.setMicMuted(micMuted);\n        }\n        if (volume !== undefined) {\n          conversationRef.current.setVolume({ volume });\n        }\n\n        return conversationRef.current.getId();\n      } finally {\n        lockRef.current = null;\n      }\n    }) as T extends SessionConfig\n      ? (options?: HookOptions) => Promise<string>\n      : (options: SessionConfig & HookOptions) => Promise<string>,\n    endSession: async () => {\n      const conversation = conversationRef.current;\n      conversationRef.current = null;\n      await conversation?.endSession();\n    },\n    setVolume: ({ volume }: { volume: number }) => {\n      conversationRef.current?.setVolume({ volume });\n    },\n    getInputByteFrequencyData: () => {\n      return conversationRef.current?.getInputByteFrequencyData();\n    },\n    getOutputByteFrequencyData: () => {\n      return conversationRef.current?.getOutputByteFrequencyData();\n    },\n    getInputVolume: () => {\n      return conversationRef.current?.getInputVolume() ?? 0;\n    },\n    getOutputVolume: () => {\n      return conversationRef.current?.getOutputVolume() ?? 0;\n    },\n    sendFeedback: (like: boolean) => {\n      conversationRef.current?.sendFeedback(like);\n    },\n    getId: () => {\n      return conversationRef.current?.getId();\n    },\n    sendContextualUpdate: (text: string) => {\n      conversationRef.current?.sendContextualUpdate(text);\n    },\n    status,\n    canSendFeedback,\n    micMuted,\n    isSpeaking: mode === \"speaking\",\n  };\n}\n\n// const con = useConversation({agentId: \"\"})\n"],"names":["_excluded","useConversation","props","micMuted","volume","defaultOptions","_objectWithoutPropertiesLoose","conversationRef","useRef","lockRef","status","setStatus","useState","canSendFeedback","setCanSendFeedback","mode","setMode","useEffect","_conversationRef$curr","undefined","current","setMicMuted","_conversationRef$curr2","setVolume","_conversationRef$curr3","endSession","startSession","async","_conversationRef$curr4","isOpen","getId","Conversation","_extends","options","onModeChange","onStatusChange","onCanSendFeedbackChange","conversation","_conversationRef$curr5","getInputByteFrequencyData","_conversationRef$curr6","getOutputByteFrequencyData","_conversationRef$curr7","getInputVolume","_conversationRef$curr8","_conversationRef$curr9","getOutputVolume","_conversationRef$curr10","_conversationRef$curr11","sendFeedback","like","_conversationRef$curr12","_conversationRef$curr13","sendContextualUpdate","text","_conversationRef$curr14","isSpeaking"],"mappings":"kXAAA,MAAAA,EAAA,CAAA,WAAA,mBAwCgBC,EACdC,EAAW,CAAO,GAElB,MAAMC,SAAEA,EAAQC,OAAEA,GAA8BF,EAAnBG,yIAAcC,CAAKJ,EAAKF,GAC/CO,EAAkBC,EAA4B,MAC9CC,EAAUD,EAAqC,OAC9CE,EAAQC,GAAaC,EAAiB,iBACtCC,EAAiBC,GAAsBF,GAAS,IAChDG,EAAMC,GAAWJ,EAAe,aAoBvC,OAlBAK,EAAU,KACoB,IAAAC,OAAXC,IAAbhB,IACae,MAAfX,GAAAW,OAAeA,EAAfX,EAAiBa,UAAjBF,EAA0BG,YAAYlB,GACxC,EACC,CAACA,IAEJc,EAAU,KACkB,IAAAK,OAAXH,IAAXf,IACakB,MAAff,GAAwB,OAATe,EAAff,EAAiBa,UAAjBE,EAA0BC,UAAU,CAAEnB,WACxC,EACC,CAACA,IAEJa,EAAU,IACD,KAAKO,IAAAA,SACVA,EAAAjB,EAAgBa,UAAhBI,EAAyBC,YAAU,EAEpC,IAEI,CACLC,aAAeC,UAAgCC,IAAAA,EAC7C,UAAAA,EAAIrB,EAAgBa,UAAhBQ,EAAyBC,SAC3B,OAAOtB,EAAgBa,QAAQU,QAGjC,GAAIrB,EAAQW,QAEV,aAD2BX,EAAQW,SACfU,QAGtB,IAwBE,OAvBArB,EAAQW,QAAUW,EAAaL,aAAYM,EAAA,CAAA,EACrC3B,MAAAA,EAAAA,EAAkB,CAAA,EAClB4B,MAAAA,EAAAA,EAAW,GACfC,CAAAA,aAAcA,EAAGnB,WACfC,EAAQD,EACV,EACAoB,eAAgBA,EAAGzB,aACjBC,EAAUD,EACZ,EACA0B,wBAAyBA,EAAGvB,sBAC1BC,EAAmBD,OAIvBN,EAAgBa,cAAgBX,EAAQW,aAEvBD,IAAbhB,GACFI,EAAgBa,QAAQC,YAAYlB,QAEvBgB,IAAXf,GACFG,EAAgBa,QAAQG,UAAU,CAAEnB,WAG/BG,EAAgBa,QAAQU,OACjC,CAAC,QACCrB,EAAQW,QAAU,IACpB,GAIFK,WAAYE,UACV,MAAMU,EAAe9B,EAAgBa,QACrCb,EAAgBa,QAAU,iBACpBiB,SAAAA,EAAcZ,eAEtBF,UAAWA,EAAGnB,aAAgCkC,IAAAA,EAC5CA,OAAAA,EAAA/B,EAAgBa,UAAhBkB,EAAyBf,UAAU,CAAEnB,YAEvCmC,0BAA2BA,KAAKC,IAAAA,EAC9B,cAAAA,EAAOjC,EAAgBa,gBAAhBoB,EAAyBD,2BAAyB,EAE3DE,2BAA4BA,KAAKC,IAAAA,EAC/B,OAA8B,OAA9BA,EAAOnC,EAAgBa,cAAO,EAAvBsB,EAAyBD,4BAA0B,EAE5DE,eAAgBA,KAAK,IAAAC,EAAAC,EACnB,OAAgD,OAAhDD,EAA8B,OAA9BC,EAAOtC,EAAgBa,cAAO,EAAvByB,EAAyBF,kBAAgBC,EAAI,GAEtDE,gBAAiBA,KAAK,IAAAC,EAAAC,EACpB,OAAiDD,OAAjDA,EAA8B,OAA9BC,EAAOzC,EAAgBa,cAAO,EAAvB4B,EAAyBF,mBAAiBC,EAAI,GAEvDE,aAAeC,IAAiB,IAAAC,EAC9BA,OAAAA,EAAA5C,EAAgBa,UAAhB+B,EAAyBF,aAAaC,EAAI,EAE5CpB,MAAOA,KAAKsB,IAAAA,EACV,cAAAA,EAAO7C,EAAgBa,gBAAhBgC,EAAyBtB,OAAK,EAEvCuB,qBAAuBC,IAAgB,IAAAC,EACrCA,OAAAA,EAAAhD,EAAgBa,UAAhBmC,EAAyBF,qBAAqBC,EAChD,EACA5C,SACAG,kBACAV,WACAqD,WAAqB,aAATzC,EAEhB"}